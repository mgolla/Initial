! function (n, t, i) {
    "use strict";
    t.module("FileManagerApp", ["pascalprecht.translate", "ngCookies"]);
    i(n.document).on("shown.bs.modal", ".modal", function () {
        n.setTimeout(function () {
            i("[autofocus]", this).focus()
        }.bind(this), 100)
    });
    i(n.document).on("click", function () {
        i("#context-menu").hide()
    });
    i(n.document).on("contextmenu", ".main-navigation .table-files td:first-child, .iconset a.thumbnail", function (n) {
        i("#context-menu").hide().css({
            left: n.pageX,
            top: n.pageY
        }).show();
        n.preventDefault()
    })
}(window, angular, jQuery),
function (n, t, i) {
    "use strict";
    t.module("FileManagerApp").controller("FileManagerCtrl", ["$scope", "$translate", "$cookies", "fileManagerConfig", "item", "fileNavigator", "fileUploader", "fileService", function (t, r, u, f, e, o, s, h) {
        t.config = f;
        t.reverse = !1;
        t.predicate = ["model.type", "model.name"];
        t.order = function (n) {
            t.reverse = t.predicate[1] === n ? !t.reverse : !1;
            t.predicate[1] = n
        };
        t.query = "";
        t.temp = new e;
        t.fileNavigator = new o;
        t.fileUploader = s;
        t.uploadFileList = [];
        t.viewTemplate = u.viewTemplate || "main-table.html";
        t.setTemplate = function (n) {
            t.viewTemplate = u.viewTemplate = n
        };
        t.changeLanguage = function (n) {
            return n ? r.use(u.language = n) : void r.use(u.language || f.defaultLang)
        };
        t.touch = function (n) {
            n = n instanceof e ? n : new e;
            n.revert();
            t.temp = n
        };
        t.smartClick = function (n) {
            var i = n.model,
                r = {
                    DocType: i.RowType,
                    FileCode: i.FileCode,
                    DocumentCount: i.DocumentCount,
                    FileId: i.FileId,
                    DocumentId: i.DocumentId,
                    DocumentName: i.name,
                    isTab: !1
                };
            return n.isFolder() ? t.fileNavigator.folderClick(n) : h.openDocTypes(r)
        };
        t.openImagePreview = function (n) {
            return n.inprocess = !0, t.modal("imagepreview").find("#imagepreview-target").attr("src", n.getUrl(!0)).unbind("load error").on("load error", function () {
                n.inprocess = !1;
                t.$apply()
            }), t.touch(n)
        };
        t.openEditItem = function (n) {
            return n.getContent(), t.modal("edit"), t.touch(n)
        };
        t.modal = function (n, t) {
            return i("#" + n).modal(t ? "hide" : "show")
        };
        t.isInThisPath = function (n) {
            var i = t.fileNavigator.currentPath.join("/");
            return -1 !== i.indexOf(n)
        };
        t.edit = function (n) {
            n.edit().then(function () {
                t.modal("edit", !0)
            })
        };
        t.changePermissions = function (n) {
            n.changePermissions().then(function () {
                t.modal("changepermissions", !0)
            })
        };
        t.copy = function (n) {
            var i = n.tempModel.path.join() === n.model.path.join();
            return i && t.fileNavigator.fileNameExists(n.tempModel.name) ? (n.error = r.instant("error_invalid_filename"), !1) : void n.copy().then(function () {
                t.fileNavigator.refresh();
                t.modal("copy", !0)
            })
        };
        t.compress = function (n) {
            n.compress().then(function () {
                return t.fileNavigator.refresh(), t.config.compressAsync ? void (n.asyncSuccess = !0) : t.modal("compress", !0)
            }, function () {
                n.asyncSuccess = !1
            })
        };
        t.extract = function (n) {
            n.extract().then(function () {
                return t.fileNavigator.refresh(), t.config.extractAsync ? void (n.asyncSuccess = !0) : t.modal("extract", !0)
            }, function () {
                n.asyncSuccess = !1
            })
        };
        t.remove = function (n) {
            n.remove().then(function () {
                t.fileNavigator.refresh();
                t.modal("delete", !0)
            })
        };
        t.rename = function (n) {
            var i = n.tempModel.path.join() === n.model.path.join();
            return i && t.fileNavigator.fileNameExists(n.tempModel.name) ? (n.error = r.instant("error_invalid_filename"), !1) : void n.rename().then(function () {
                t.fileNavigator.refresh();
                t.modal("rename", !0)
            })
        };
        t.createFolder = function (n) {
            var i = n.tempModel.name && n.tempModel.name.trim();
            return n.tempModel.type = "dir", n.tempModel.path = t.fileNavigator.currentPath, !i || t.fileNavigator.fileNameExists(i) ? (n.error = r.instant("error_invalid_filename"), !1) : void n.createFolder().then(function () {
                t.fileNavigator.refresh();
                t.modal("newfolder", !0)
            })
        };
        t.uploadFiles = function () {
            t.fileUploader.upload(t.uploadFileList, t.fileNavigator.currentPath).then(function () {
                t.fileNavigator.refresh();
                t.modal("uploadfile", !0)
            }, function (n) {
                var i = n.result && n.result.error || r.instant("error_uploading_files");
                t.temp.error = i
            })
        };
        t.getQueryParam = function (t) {
            var i;
            return n.location.search.substr(1).split("&").forEach(function (n) {
                if (t === n.split("=")[0]) return (i = n.split("=")[1], !1)
            }), i
        };
        t.changeLanguage(t.getQueryParam("lang"));
        t.isWindows = "Windows" === t.getQueryParam("server");
        t.fileNavigator.refresh()
    }])
}(window, angular, jQuery),
function (n, t) {
    "use strict";
    n.module("FileManagerApp").controller("ModalFileManagerCtrl", ["$scope", "$rootScope", "fileNavigator", function (n, i, r) {
        n.reverse = !1;
        n.predicate = ["model.type", "model.name"];
        n.order = function (t) {
            n.reverse = n.predicate[1] === t ? !n.reverse : !1;
            n.predicate[1] = t
        };
        n.fileNavigator = new r;
        i.select = function (n, i) {
            i.tempModel.path = n.model.fullPath().split("/");
            t("#selector").modal("hide")
        };
        i.openNavigator = function (i) {
            n.fileNavigator.currentPath = i.model.path.slice();
            n.fileNavigator.refresh();
            t("#selector").modal("show")
        }
    }])
}(angular, jQuery),
function (n) {
    "use strict";
    n.module("FileManagerApp").service("chmod", function () {
        var n = function (n) {
            if (this.owner = this.getRwxObj(), this.group = this.getRwxObj(), this.others = this.getRwxObj(), n) {
                var t = isNaN(n) ? this.convertfromCode(n) : this.convertfromOctal(n);
                if (!t) throw new Error("Invalid chmod input data");
                this.owner = t.owner;
                this.group = t.group;
                this.others = t.others
            }
        };
        return n.prototype.toOctal = function (n, t) {
            var f = ["owner", "group", "others"],
                r = [],
                i, u;
            for (i in f) u = f[i], r[i] = this[u].read && this.octalValues.read || 0, r[i] += this[u].write && this.octalValues.write || 0, r[i] += this[u].exec && this.octalValues.exec || 0;
            return (n || "") + r.join("") + (t || "")
        }, n.prototype.toCode = function (n, t) {
            var f = ["owner", "group", "others"],
                r = [],
                i, u;
            for (i in f) u = f[i], r[i] = this[u].read && this.codeValues.read || "-", r[i] += this[u].write && this.codeValues.write || "-", r[i] += this[u].exec && this.codeValues.exec || "-";
            return (n || "") + r.join("") + (t || "")
        }, n.prototype.getRwxObj = function () {
            return {
                read: !1,
                write: !1,
                exec: !1
            }
        }, n.prototype.octalValues = {
            read: 4,
            write: 2,
            exec: 1
        }, n.prototype.codeValues = {
            read: "r",
            write: "w",
            exec: "x"
        }, n.prototype.convertfromCode = function (n) {
            var t, i, u, r;
            if (n = ("" + n).replace(/\s/g, ""), n = 10 === n.length ? n.substr(1) : n, /^[-rwxt]{9}$/.test(n)) {
                t = [];
                i = n.match(/.{1,3}/g);
                for (u in i) r = this.getRwxObj(), r.read = /r/.test(i[u]), r.write = /w/.test(i[u]), r.exec = /x|t/.test(i[u]), t.push(r);
                return {
                    owner: t[0],
                    group: t[1],
                    others: t[2]
                }
            }
        }, n.prototype.convertfromOctal = function (n) {
            var t, i, u, r;
            if (n = ("" + n).replace(/\s/g, ""), n = 4 === n.length ? n.substr(1) : n, /^[0-7]{3}$/.test(n)) {
                t = [];
                i = n.match(/.{1}/g);
                for (u in i) r = this.getRwxObj(), r.read = /[4567]/.test(i[u]), r.write = /[2367]/.test(i[u]), r.exec = /[1357]/.test(i[u]), t.push(r);
                return {
                    owner: t[0],
                    group: t[1],
                    others: t[2]
                }
            }
        }, n
    })
}(angular),
function (n, t, i) {
    "use strict";
    t.module("FileManagerApp").factory("item", ["$http", "$q", "$translate", "fileManagerConfig", "chmod", function (r, u, f, e, o) {
        var s = function (n, i) {
            function u(n) {
                var t = (n || "").toString().split(/[- :]/);
                return new Date(t[0], t[1] - 1, t[2], t[3], t[4], t[5])
            }
            var r = {
                DocumentId: n && n.DocumentId || "",
                FileCode: n && n.FileCode || "",
                DocumentCount: n && n.DocumentCount || "",
                FileId: n && n.FileId || "",
                RowType: n && n.RowType || "",
                name: n && n.name || "",
                path: i || [],
                type: n && n.type || "file",
                size: n && parseInt(n.size || 0),
                date: u(n && n.date),
                perms: new o(n && n.rights),
                content: n && n.content || "",
                recursive: !1,
                sizeKb: function () {
                    return Math.round(this.size / 1024, 1)
                },
                fullPath: function () {
                    return ("/" + this.path.join("/") + "/" + this.name).replace(/\/\//, "/")
                }
            };
            this.error = "";
            this.inprocess = !1;
            this.model = t.copy(r);
            this.tempModel = t.copy(r)
        };
        return s.prototype.update = function () {
            t.extend(this.model, t.copy(this.tempModel))
        }, s.prototype.revert = function () {
            t.extend(this.tempModel, t.copy(this.model));
            this.error = ""
        }, s.prototype.deferredHandler = function (n, t, i) {
            return n && "object" == typeof n || (this.error = "Bridge response error, please check the docs"), n.result && n.result.error && (this.error = n.result.error), !this.error && n.error && (this.error = n.error.message), !this.error && i && (this.error = i), this.error ? t.reject(n) : (this.update(), t.resolve(n))
        }, s.prototype.createFolder = function () {
            var n = this,
                t = u.defer(),
                i = {
                    params: {
                        mode: "addfolder",
                        path: n.tempModel.path.join("/"),
                        name: n.tempModel.name
                    }
                };
            return n.inprocess = !0, n.error = "", r.post(e.createFolderUrl, i).success(function (i) {
                n.deferredHandler(i, t)
            }).error(function (i) {
                n.deferredHandler(i, t, f.instant("error_creating_folder"))
            })["finally"](function () {
                n.inprocess = !1
            }), t.promise
        }, s.prototype.rename = function () {
            var n = this,
                t = u.defer(),
                i = {
                    params: {
                        mode: "rename",
                        path: n.model.fullPath(),
                        newPath: n.tempModel.fullPath()
                    }
                };
            return n.inprocess = !0, n.error = "", r.post(e.renameUrl, i).success(function (i) {
                n.deferredHandler(i, t)
            }).error(function (i) {
                n.deferredHandler(i, t, f.instant("error_renaming"))
            })["finally"](function () {
                n.inprocess = !1
            }), t.promise
        }, s.prototype.copy = function () {
            var n = this,
                t = u.defer(),
                i = {
                    params: {
                        mode: "copy",
                        path: n.model.fullPath(),
                        newPath: n.tempModel.fullPath()
                    }
                };
            return n.inprocess = !0, n.error = "", r.post(e.copyUrl, i).success(function (i) {
                n.deferredHandler(i, t)
            }).error(function (i) {
                n.deferredHandler(i, t, f.instant("error_copying"))
            })["finally"](function () {
                n.inprocess = !1
            }), t.promise
        }, s.prototype.compress = function () {
            var n = this,
                t = u.defer(),
                i = {
                    params: {
                        mode: "compress",
                        path: n.model.fullPath(),
                        destination: n.tempModel.fullPath()
                    }
                };
            return n.inprocess = !0, n.error = "", r.post(e.compressUrl, i).success(function (i) {
                n.deferredHandler(i, t)
            }).error(function (i) {
                n.deferredHandler(i, t, f.instant("error_compressing"))
            })["finally"](function () {
                n.inprocess = !1
            }), t.promise
        }, s.prototype.extract = function () {
            var n = this,
                t = u.defer(),
                i = {
                    params: {
                        mode: "extract",
                        path: n.model.fullPath(),
                        sourceFile: n.model.fullPath(),
                        destination: n.tempModel.fullPath()
                    }
                };
            return n.inprocess = !0, n.error = "", r.post(e.extractUrl, i).success(function (i) {
                n.deferredHandler(i, t)
            }).error(function (i) {
                n.deferredHandler(i, t, f.instant("error_extracting"))
            })["finally"](function () {
                n.inprocess = !1
            }), t.promise
        }, s.prototype.getUrl = function (n) {
            var t = this.model.fullPath(),
                r = {
                    mode: "download",
                    preview: n,
                    path: t
                };
            return t && [e.downloadFileUrl, i.param(r)].join("?")
        }, s.prototype.download = function (t) {
            "dir" !== this.model.type && n.open(this.getUrl(t), "_blank", "")
        }, s.prototype.getContent = function () {
            var n = this,
                t = u.defer(),
                i = {
                    params: {
                        mode: "editfile",
                        path: n.tempModel.fullPath()
                    }
                };
            return n.inprocess = !0, n.error = "", r.post(e.getContentUrl, i).success(function (i) {
                n.tempModel.content = n.model.content = i.result;
                n.deferredHandler(i, t)
            }).error(function (i) {
                n.deferredHandler(i, t, f.instant("error_getting_content"))
            })["finally"](function () {
                n.inprocess = !1
            }), t.promise
        }, s.prototype.remove = function () {
            var n = this,
                t = u.defer(),
                i = {
                    params: {
                        mode: "delete",
                        path: n.tempModel.fullPath()
                    }
                };
            return n.inprocess = !0, n.error = "", r.post(e.removeUrl, i).success(function (i) {
                n.deferredHandler(i, t)
            }).error(function (i) {
                n.deferredHandler(i, t, f.instant("error_deleting"))
            })["finally"](function () {
                n.inprocess = !1
            }), t.promise
        }, s.prototype.edit = function () {
            var n = this,
                t = u.defer(),
                i = {
                    params: {
                        mode: "savefile",
                        content: n.tempModel.content,
                        path: n.tempModel.fullPath()
                    }
                };
            return n.inprocess = !0, n.error = "", r.post(e.editUrl, i).success(function (i) {
                n.deferredHandler(i, t)
            }).error(function (i) {
                n.deferredHandler(i, t, f.instant("error_modifying"))
            })["finally"](function () {
                n.inprocess = !1
            }), t.promise
        }, s.prototype.changePermissions = function () {
            var n = this,
                t = u.defer(),
                i = {
                    params: {
                        mode: "changepermissions",
                        path: n.tempModel.fullPath(),
                        perms: n.tempModel.perms.toOctal(),
                        permsCode: n.tempModel.perms.toCode(),
                        recursive: n.tempModel.recursive
                    }
                };
            return n.inprocess = !0, n.error = "", r.post(e.permissionsUrl, i).success(function (i) {
                n.deferredHandler(i, t)
            }).error(function (i) {
                n.deferredHandler(i, t, f.instant("error_changing_perms"))
            })["finally"](function () {
                n.inprocess = !1
            }), t.promise
        }, s.prototype.isFolder = function () {
            return "dir" === this.model.type
        }, s.prototype.isEditable = function () {
            return !this.isFolder() && e.isEditableFilePattern.test(this.model.name)
        }, s.prototype.isImage = function () {
            return e.isImageFilePattern.test(this.model.name)
        }, s.prototype.isCompressible = function () {
            return this.isFolder()
        }, s.prototype.isExtractable = function () {
            return !this.isFolder() && e.isExtractableFilePattern.test(this.model.name)
        }, s
    }])
}(window, angular, jQuery),
function (n) {
    "use strict";
    var t = n.module("FileManagerApp");
    t.directive("angularFilemanager", ["$parse", "fileManagerConfig", function (n, t) {
        return {
            restrict: "EA",
            templateUrl: t.tplPath + "/main.html"
        }
    }]);
    t.directive("ngFile", ["$parse", function (n) {
        return {
            restrict: "A",
            link: function (t, i, r) {
                var u = n(r.ngFile),
                    f = u.assign;
                i.bind("change", function () {
                    t.$apply(function () {
                        f(t, i[0].files)
                    })
                })
            }
        }
    }]);
    t.directive("ngRightClick", ["$parse", function (n) {
        return function (t, i, r) {
            var u = n(r.ngRightClick);
            i.bind("contextmenu", function (n) {
                t.$apply(function () {
                    n.preventDefault();
                    u(t, {
                        $event: n
                    })
                })
            })
        }
    }])
}(angular),
function (n) {
    "use strict";
    var t = n.module("FileManagerApp");
    t.filter("strLimit", ["$filter", function (n) {
        return function (t, i) {
            return t.length <= i ? t : n("limitTo")(t, i) + "..."
        }
    }]);
    t.filter("formatDate", ["$filter", function () {
        return function (n) {
            return n instanceof Date ? n.toISOString().substring(0, 19).replace("T", " ") : (n.toLocaleString || n.toString).apply(n)
        }
    }])
}(angular),
function (n) {
    "use strict";
    n.module("FileManagerApp").provider("fileManagerConfig", function () {
        var t = {
            appName: "https://github.com/joni2back/angular-filemanager",
            defaultLang: "en",
            listUrl: "bridges/php/handler.php",
            uploadUrl: "bridges/php/handler.php",
            renameUrl: "bridges/php/handler.php",
            copyUrl: "bridges/php/handler.php",
            removeUrl: "bridges/php/handler.php",
            editUrl: "bridges/php/handler.php",
            getContentUrl: "bridges/php/handler.php",
            createFolderUrl: "bridges/php/handler.php",
            downloadFileUrl: "bridges/php/handler.php",
            compressUrl: "bridges/php/handler.php",
            extractUrl: "bridges/php/handler.php",
            permissionsUrl: "bridges/php/handler.php",
            searchForm: !0,
            sidebar: !0,
            breadcrumb: !0,
            allowedActions: {
                upload: !0,
                rename: !0,
                copy: !0,
                edit: !0,
                changePermissions: !0,
                compress: !0,
                compressChooseName: !0,
                extract: !0,
                download: !0,
                preview: !0,
                remove: !0
            },
            previewImagesInModal: !0,
            enablePermissionsRecursive: !0,
            compressAsync: !0,
            extractAsync: !0,
            isEditableFilePattern: /\.(txt|html?|aspx?|ini|pl|py|md|css|js|log|htaccess|htpasswd|json|sql|xml|xslt?|sh|rb|as|bat|cmd|coffee|php[3-6]?|java|c|cbl|go|h|scala|vb)$/i,
            isImageFilePattern: /\.(jpe?g|gif|bmp|png|svg|tiff?)$/i,
            isExtractableFilePattern: /\.(gz|tar|rar|g?zip)$/i,
            tplPath: "src/templates"
        };
        return {
            $get: function () {
                return t
            },
            set: function (i) {
                n.extend(t, i)
            }
        }
    })
}(angular),
function (n) {
    "use strict";
    n.module("FileManagerApp").config(["$translateProvider", function (n) {
        n.translations("en", {
            filemanager: "File Manager",
            language: "Language",
            english: "English",
            spanish: "Spanish",
            portuguese: "Portuguese",
            french: "French",
            confirm: "Confirm",
            cancel: "Cancel",
            close: "Close",
            upload_file: "Upload file",
            files_will_uploaded_to: "Files will be uploaded to",
            uploading: "Uploading",
            permissions: "Permissions",
            select_destination_folder: "Select the destination folder",
            source: "Source",
            destination: "Destination",
            copy_file: "Copy file",
            sure_to_delete: "Are you sure to delete",
            change_name_move: "Change name / move",
            enter_new_name_for: "Enter new name for",
            extract_item: "Extract item",
            extraction_started: "Extraction started in a background process",
            compression_started: "Compression started in a background process",
            enter_folder_name_for_extraction: "Enter the folder name for the extraction of",
            enter_folder_name_for_compression: "Enter the folder name for the compression of",
            toggle_fullscreen: "Toggle fullscreen",
            edit_file: "Edit file",
            file_content: "File content",
            loading: "Loading",
            search: "Search",
            create_folder: "Create folder",
            create: "Create",
            folder_name: "Folder name",
            upload: "Upload",
            change_permissions: "Change permissions",
            change: "Change",
            details: "Details",
            icons: "Icons",
            list: "List",
            name: "Name",
            size: "Size",
            actions: "Actions",
            date: "Date",
            no_files_in_folder: "No files in this folder",
            no_folders_in_folder: "This folder not contains children folders",
            select_this: "Select this",
            go_back: "Go back",
            wait: "Wait",
            move: "Move",
            download: "Download",
            view_item: "View item",
            remove: "Delete",
            edit: "Edit",
            copy: "Copy",
            rename: "Rename",
            extract: "Extract",
            compress: "Compress",
            error_invalid_filename: "Invalid filename or already exists, specify another name",
            error_modifying: "An error occurred modifying the file",
            error_deleting: "An error occurred deleting the file or folder",
            error_renaming: "An error occurred renaming the file",
            error_copying: "An error occurred copying the file",
            error_compressing: "An error occurred compressing the file or folder",
            error_extracting: "An error occurred extracting the file",
            error_creating_folder: "An error occurred creating the folder",
            error_getting_content: "An error occurred getting the content of the file",
            error_changing_perms: "An error occurred changing the permissions of the file",
            error_uploading_files: "An error occurred uploading files",
            sure_to_start_compression_with: "Are you sure to compress",
            owner: "Owner",
            group: "Group",
            others: "Others",
            read: "Read",
            write: "Write",
            exec: "Exec",
            original: "Original",
            changes: "Changes",
            recursive: "Recursive",
            preview: "Item preview",
            open: "Open"
        });
        n.translations("pt", {
            filemanager: "Gerenciador de arquivos",
            language: "Língua",
            english: "Inglês",
            spanish: "Espanhol",
            portuguese: "Portugues",
            french: "Francês",
            confirm: "Confirmar",
            cancel: "Cancelar",
            close: "Fechar",
            upload_file: "Carregar arquivo",
            files_will_uploaded_to: "Os arquivos serão enviados para",
            uploading: "Carregar",
            permissions: "Autorizações",
            select_destination_folder: "Selecione a pasta de destino",
            source: "Origem",
            destination: "Destino",
            copy_file: "Copiar arquivo",
            sure_to_delete: "Tem certeza de que deseja apagar",
            change_name_move: "Renomear / mudança",
            enter_new_name_for: "Digite o novo nome para",
            extract_item: "Extrair arquivo",
            extraction_started: "A extração começou em um processo em segundo plano",
            compression_started: "A compressão começou em um processo em segundo plano",
            enter_folder_name_for_extraction: "Digite o nome da pasta para a extração de",
            enter_folder_name_for_compression: "Digite o nome da pasta para Compressão",
            toggle_fullscreen: "Ativar/desativar tela cheia",
            edit_file: "Editar arquivo",
            file_content: "Conteúdo do arquivo",
            loading: "Carregando",
            search: "Localizar",
            create_folder: "Criar Pasta",
            create: "Criar",
            folder_name: "Nome da pasta",
            upload: "Fazer",
            change_permissions: "Alterar permissões",
            change: "Alterar",
            details: "Detalhes",
            icons: "Icones",
            list: "Lista",
            name: "Nome",
            size: "Tamanho",
            actions: "Ações",
            date: "Data",
            no_files_in_folder: "Não há arquivos nesta pasta",
            no_folders_in_folder: "Esta pasta não contém subpastas",
            select_this: "Selecione esta",
            go_back: "Voltar",
            wait: "Espere",
            move: "Mover",
            download: "Baixar",
            view_item: "Veja o arquivo",
            remove: "Excluir",
            edit: "Editar",
            copy: "Copiar",
            rename: "Renomear",
            extract: "Extrair",
            compress: "Comprimir",
            error_invalid_filename: "Nome do arquivo inválido ou nome de arquivo já existe, especifique outro nome",
            error_modifying: "Ocorreu um erro ao modificar o arquivo",
            error_deleting: "Ocorreu um erro ao excluir o arquivo ou pasta",
            error_renaming: "Ocorreu um erro ao mudar o nome do arquivo",
            error_copying: "Ocorreu um erro ao copiar o arquivo",
            error_compressing: "Ocorreu um erro ao comprimir o arquivo ou pasta",
            error_extracting: "Ocorreu um erro ao extrair o arquivo",
            error_creating_folder: "Ocorreu um erro ao criar a pasta",
            error_getting_content: "Ocorreu um erro ao obter o conteúdo do arquivo",
            error_changing_perms: "Ocorreu um erro ao alterar as permissões do arquivo",
            error_uploading_files: "Ocorreu um erro upload de arquivos",
            sure_to_start_compression_with: "Tem certeza que deseja comprimir",
            owner: "Proprietário",
            group: "Grupo",
            others: "Outros",
            read: "Leitura",
            write: "Escrita ",
            exec: "Execução",
            original: "Original",
            changes: "Mudanças",
            recursive: "Recursiva",
            preview: "Visualização",
            open: "Abrir"
        });
        n.translations("es", {
            filemanager: "Administrador de archivos",
            language: "Idioma",
            english: "Ingles",
            spanish: "Español",
            portuguese: "Portugues",
            french: "Francés",
            confirm: "Confirmar",
            cancel: "Cancelar",
            close: "Cerrar",
            upload_file: "Subir archivo",
            files_will_uploaded_to: "Los archivos seran subidos a",
            uploading: "Subiendo",
            permissions: "Permisos",
            select_destination_folder: "Seleccione la carpeta de destino",
            source: "Origen",
            destination: "Destino",
            copy_file: "Copiar archivo",
            sure_to_delete: "Esta seguro que desea eliminar",
            change_name_move: "Renombrar / mover",
            enter_new_name_for: "Ingrese el nuevo nombre para",
            extract_item: "Extraer archivo",
            extraction_started: "La extraccion ha comenzado en un proceso de segundo plano",
            compression_started: "La compresion ha comenzado en un proceso de segundo plano",
            enter_folder_name_for_extraction: "Ingrese el nombre de la carpeta para la extraccion de",
            enter_folder_name_for_compression: "Ingrese el nombre de la carpeta para la compresion de",
            toggle_fullscreen: "Activar/Desactivar pantalla completa",
            edit_file: "Editar archivo",
            file_content: "Contenido del archivo",
            loading: "Cargando",
            search: "Buscar",
            create_folder: "Crear carpeta",
            create: "Crear",
            folder_name: "Nombre de la carpeta",
            upload: "Subir",
            change_permissions: "Cambiar permisos",
            change: "Cambiar",
            details: "Detalles",
            icons: "Iconos",
            list: "Lista",
            name: "Nombre",
            size: "Tamaño",
            actions: "Acciones",
            date: "Fecha",
            no_files_in_folder: "No hay archivos en esta carpeta",
            no_folders_in_folder: "Esta carpeta no contiene sub-carpetas",
            select_this: "Seleccionar esta",
            go_back: "Volver",
            wait: "Espere",
            move: "Mover",
            download: "Descargar",
            view_item: "Ver archivo",
            remove: "Eliminar",
            edit: "Editar",
            copy: "Copiar",
            rename: "Renombrar",
            extract: "Extraer",
            compress: "Comprimir",
            error_invalid_filename: "El nombre del archivo es invalido o ya existe",
            error_modifying: "Ocurrio un error al intentar modificar el archivo",
            error_deleting: "Ocurrio un error al intentar eliminar el archivo",
            error_renaming: "Ocurrio un error al intentar renombrar el archivo",
            error_copying: "Ocurrio un error al intentar copiar el archivo",
            error_compressing: "Ocurrio un error al intentar comprimir el archivo",
            error_extracting: "Ocurrio un error al intentar extraer el archivo",
            error_creating_folder: "Ocurrio un error al intentar crear la carpeta",
            error_getting_content: "Ocurrio un error al obtener el contenido del archivo",
            error_changing_perms: "Ocurrio un error al cambiar los permisos del archivo",
            error_uploading_files: "Ocurrio un error al subir archivos",
            sure_to_start_compression_with: "Esta seguro que desea comprimir",
            owner: "Propietario",
            group: "Grupo",
            others: "Otros",
            read: "Lectura",
            write: "Escritura",
            exec: "Ejecucion",
            original: "Original",
            changes: "Cambios",
            recursive: "Recursivo",
            preview: "Vista previa",
            open: "Abrir"
        });
        n.translations("fr", {
            filemanager: "Gestionnaire de fichier",
            language: "Langue",
            english: "Anglais",
            spanish: "Espagnol",
            portuguese: "Portugais",
            french: "Français",
            confirm: "Confirmer",
            cancel: "Annuler",
            close: "Fermer",
            upload_file: "Uploader un fichier",
            files_will_uploaded_to: "Les fichiers seront uploadé dans",
            uploading: "Upload en cours",
            permissions: "Permissions",
            select_destination_folder: "Sélectionné le dossier de destination",
            source: "Source",
            destination: "Destination",
            copy_file: "Copier le fichier",
            sure_to_delete: "Êtes-vous sûr de vouloir supprimer",
            change_name_move: "Renommer / Déplacer",
            enter_new_name_for: "Entrer le nouveau nom pour",
            extract_item: "Extraires les éléments",
            extraction_started: "L'extraction a démarré en tâche de fond",
            compression_started: "La compression a démarré en tâche de fond",
            enter_folder_name_for_extraction: "Entrer le nom du dossier pour l'extraction de",
            enter_folder_name_for_compression: "Entrer le nom du dossier pour la compression de",
            toggle_fullscreen: "Basculer en plein écran",
            edit_file: "Éditer le fichier",
            file_content: "Contenu du fichier",
            loading: "Chargement en cours",
            search: "Recherche",
            create_folder: "Créer un dossier",
            create: "Créer",
            folder_name: "Nom du dossier",
            upload: "Upload",
            change_permissions: "Changer les permissions",
            change: "Changer",
            details: "Details",
            icons: "Icons",
            list: "Liste",
            name: "Nom",
            size: "Taille",
            actions: "Actions",
            date: "Date",
            no_files_in_folder: "Aucun fichier dans ce dossier",
            no_folders_in_folder: "Ce dossier ne contiens pas de dossier",
            select_this: "Sélectionner",
            go_back: "Retour",
            wait: "Patienter",
            move: "Déplacer",
            download: "Télécharger",
            view_item: "Voir l'élément",
            remove: "Supprimer",
            edit: "Éditer",
            copy: "Copier",
            rename: "Renommer",
            extract: "Extraire",
            compress: "Compresser",
            error_invalid_filename: "Nom de fichier invalide ou déjà existant, merci de spécifier un autre nom",
            error_modifying: "Une erreur est survenue pendant la modification du fichier",
            error_deleting: "Une erreur est survenue pendant la suppression du fichier ou du dossier",
            error_renaming: "Une erreur est survenue pendant le renommage du fichier",
            error_copying: "Une erreur est survenue pendant la copie du fichier",
            error_compressing: "Une erreur est survenue pendant la compression du fichier ou du dossier",
            error_extracting: "Une erreur est survenue pendant l'extraction du fichier",
            error_creating_folder: "Une erreur est survenue pendant la création du dossier",
            error_getting_content: "Une erreur est survenue pendant la récupération du contenu du fichier",
            error_changing_perms: "Une erreur est survenue pendant le changement des permissions du fichier",
            error_uploading_files: "Une erreur est survenue pendant l'upload des fichiers",
            sure_to_start_compression_with: "Êtes-vous sûre de vouloir compresser",
            owner: "Propriétaire",
            group: "Groupe",
            others: "Autres",
            read: "Lecture",
            write: "Écriture",
            exec: "Éxécution",
            original: "Original",
            changes: "Modifications",
            recursive: "Récursif",
            preview: "Aperçu",
            open: "Ouvrir"
        })
    }])
}(angular),
function (n) {
    "use strict";
    n.module("FileManagerApp").service("fileNavigator", ["$http", "$q", "fileManagerConfig", "item", "appSettings", function (n, t, i, r, u) {
        n.defaults.headers.common["X-Requested-With"] = "XMLHttpRequest";
        var f = function () {
            this.requesting = !1;
            this.fileList = [];
            this.currentPath = [];
            this.currentObjectPath = [];
            this.history = [];
            this.error = ""
        };
        return f.prototype.deferredHandler = function (n, t, i) {
            return n && "object" == typeof n || (this.error = "Bridge response error, please check the docs"), !this.error && n.result && n.result.error && (this.error = n.result.error), !this.error && n.error && (this.error = n.error.message), !this.error && i && (this.error = i), this.error ? t.reject(n) : t.resolve(n)
        }, f.prototype.list = function () {
            var r = this,
                f = t.defer(),
                e = r.currentPath.join("/"),
                o = {
                    params: {
                        mode: "list",
                        onlyFolders: !1,
                        path: "/" + e,
                        documentId: u.DocumentId
                    }
                };
            return r.requesting = !0, r.fileList = [], r.error = "", n.post(i.listUrl, o).success(function (n) {
                if (u.DocumentPath != "") {
                    appSettings.DocumentFolders = [];
                    var folders = u.DocumentPath.replace('/Documents', '').split('/');

                    angular.forEach(folders, function (value, key) {
                        if (value && value.toString().trim().length > 0) {

                            var name = value.replace(/\s+/g, '-');
                            appSettings.DocumentFolders.push(name);

                        }

                    });

                    if (appSettings.DocumentFolders && appSettings.DocumentFolders.length > 0) {

                        setTimeout(function () {
                            $('[name="' + appSettings.DocumentFolders[0] + '"]').click();
                        }, 100)
                    }



                    u.DocumentPath = "";
                    //var t = $.grep(n.result, function (n) {
                    //    return n.DocumentId == u.DocumentId
                    //});
                    //t && (setTimeout(function () {


                    //    //$("#doc-" + u.DocumentId).click()

                    //}, 100), setTimeout(function () {
                    //    u.SecondDocumentId && u.SecondDocumentId != "" && ($("#doc-" + u.SecondDocumentId).click(), u.SecondDocumentId = "")
                    //}, 150))


                }
                r.deferredHandler(n, f)
            }).error(function (n) {
                r.deferredHandler(n, f, "Unknown error listing, check the response")
            })["finally"](function () {
                r.requesting = !1
            }), f.promise
        }, f.prototype.refresh = function () {
            var n = this,
                t = n.currentPath.join("/");
            return n.list().then(function (i) {
                n.fileList = (i.result || []).map(function (t) {
                    return new r(t, n.currentPath)
                });
                n.buildTree(t)
            })
        }, f.prototype.buildTree = function (n) {
            function i(n, t, r) {
                var u = r ? r + "/" + t.model.name : t.model.name,
                    f, e;
                if (n.name.trim() && 0 !== r.trim().indexOf(n.name) && (n.nodes = []), n.name !== r)
                    for (f in n.nodes) i(n.nodes[f], t, r);
                else {
                    for (e in n.nodes)
                        if (n.nodes[e].name === u) return;
                    n.nodes.push({
                        item: t,
                        name: u,
                        nodes: []
                    })
                }
                n.nodes = n.nodes.sort(function (n, t) {
                    return n.name.toLowerCase() < t.name.toLowerCase() ? -1 : n.name.toLowerCase() === t.name.toLowerCase() ? 0 : 1
                })
            }

            function r(n, t) {
                t.push(n);
                for (var i in n.nodes) r(n.nodes[i], t)
            }

            function o(n, t) {
                return n.filter(function (n) {
                    return n.name === t
                })[0]
            }
            var u = [],
                f = {},
                e, t;
            this.history.length || this.history.push({
                name: "",
                nodes: []
            });
            r(this.history[0], u);
            f = o(u, n);
            f.nodes = [];
            for (e in this.fileList) t = this.fileList[e], t.isFolder() && i(this.history[0], t, n)
        }, f.prototype.folderClick = function (n) {

            u.DocumentId = n.model.DocumentId;
            var t = {
                path: n.model.fullPath().split("/").splice(1)[n.model.fullPath().split("/").splice(1).length - 1],
                documentId: n.model.DocumentId
            };
            this.currentObjectPath.push(t);
            this.currentPath = [];
            n && n.isFolder() && (this.currentPath = n.model.fullPath().split("/").splice(1));
            this.refresh();

            if (appSettings.DocumentFolders && appSettings.DocumentFolders.length > 0) {
                var dataFolder = appSettings.DocumentFolders;
                var arrLen = appSettings.DocumentFolders.length;
                angular.forEach(dataFolder, function (value, key) {
                    if (value && value.toString().trim().length > 0 && key > 0) {



                        setTimeout(function () {
                            $('[name="' + value + '"]').click();
                        }, 100)

                    }
                    if (arrLen == (key + 1)) {
                        setTimeout(function () {
                            appSettings.DocumentFolders = [];
                        }, 200)

                    }

                });

            }

        }, f.prototype.upDir = function () {
            this.currentPath[0] && (this.currentPath = this.currentPath.slice(0, -1), this.refresh())
        }, f.prototype.goTo = function (n) {
            var i = this.currentPath.slice(n, n + 1),
                t;
            i.length > 0 && (t = $.grep(this.currentObjectPath, function (n) {
                return n.path == i[0]
            }), t && (u.DocumentId = t[0].documentId));
            this.currentPath = this.currentPath.slice(0, n + 1);
            this.refresh()
        }, f.prototype.fileNameExists = function (n) {
            for (var t in this.fileList)
                if (t = this.fileList[t], n.trim && t.model.name.trim() === n.trim()) return !0
        }, f.prototype.listHasFolders = function () {
            for (var n in this.fileList)
                if ("dir" === this.fileList[n].model.type) return !0
        }, f
    }])
}(angular),
function (n, t) {
    "use strict";
    t.module("FileManagerApp").service("fileUploader", ["$http", "$q", "fileManagerConfig", function (i, r, u) {
        function f(n, t, i) {
            return n && "object" == typeof n ? n.result && n.result.error ? t.reject(n) : n.error ? t.reject(n) : i ? t.reject(i) : void t.resolve(n) : t.reject("Bridge response error, please check the docs")
        }
        this.requesting = !1;
        this.upload = function (e, o) {
            var s, l;
            if (!n.FormData) throw new Error("Unsupported browser version");
            var a = this,
                h = new n.FormData,
                c = r.defer();
            for (h.append("destination", "/" + o.join("/")), s = 0; s < e.length; s++) l = e.item(s), l instanceof n.File && h.append("file-" + s, l);
            return a.requesting = !0, i.post(u.uploadUrl, h, {
                transformRequest: t.identity,
                headers: {
                    "Content-Type": void 0
                }
            }).success(function (n) {
                f(n, c)
            }).error(function (n) {
                f(n, c, "Unknown error uploading files")
            })["finally"](function () {
                a.requesting = !1
            }), c.promise
        }
    }])
}(window, angular);
angular.module("FileManagerApp").run(["$templateCache", function (n) {
    n.put("src/templates/current-folder-breadcrumb.html", '<ol class="breadcrumb mb0">\r\n    <li>\r\n        <a href="" ng-click="fileNavigator.goTo(-1)">\r\n            <i class="glyphicon glyphicon-folder-open mr2"><\/i>\r\n        <\/a>\r\n    <\/li>\r\n    <li ng-repeat="(key, dir) in fileNavigator.currentPath track by key" ng-class="{\'active\':$last}" class="animated fast fadeIn">\r\n        <a href="" ng-show="!$last" ng-click="fileNavigator.goTo(key)">\r\n            <i class="glyphicon glyphicon-folder-open mr2"><\/i> {{dir}}\r\n        <\/a>\r\n        <span ng-show="$last"><i class="glyphicon glyphicon-folder-open mr2"><\/i>  {{dir}}<\/span>\r\n    <\/li>\r\n    <li><button class="btn btn-primary btn-xs" ng-click="fileNavigator.upDir()">&crarr;<\/button><\/li>\r\n<\/ol>');
    n.put("src/templates/item-context-menu.html", '<div id="context-menu" class="dropdown clearfix animated fast fadeIn">\r\n    <ul class="dropdown-menu dropdown-right-click" role="menu" aria-labelledby="dropdownMenu" style="">\r\n        \r\n        <li ng-show="temp.isFolder()">\r\n            <a href="" tabindex="-1"  ng-click="smartClick(temp)">\r\n                <i class="glyphicon glyphicon-folder-open"><\/i> {{\'open\' | translate}}\r\n            <\/a>\r\n        <\/li>\r\n\r\n        <li ng-show="config.allowedActions.download && !temp.isFolder()">\r\n            <a href="" tabindex="-1" ng-click="temp.download()">\r\n                <i class="glyphicon glyphicon-download"><\/i> {{\'download\' | translate}}\r\n            <\/a>\r\n        <\/li>\r\n\r\n        <li ng-show="config.allowedActions.preview && temp.isImage()">\r\n            <a href="" tabindex="-1" ng-click="openImagePreview(temp)">\r\n                <i class="glyphicon glyphicon-picture"><\/i> {{\'view_item\' | translate}}\r\n            <\/a>\r\n        <\/li>\r\n\r\n        <li class="divider"><\/li>\r\n\r\n        <li ng-show="config.allowedActions.rename">\r\n            <a href="" tabindex="-1" data-toggle="modal" data-target="#rename">\r\n                <i class="glyphicon glyphicon-edit"><\/i> {{\'rename\' | translate}}\r\n            <\/a>\r\n        <\/li>\r\n\r\n        <li ng-show="config.allowedActions.copy && !temp.isFolder()">\r\n            <a href="" tabindex="-1" data-toggle="modal" data-target="#copy">\r\n                <i class="glyphicon glyphicon-log-out"><\/i> {{\'copy\' | translate}}\r\n            <\/a>\r\n        <\/li>\r\n\r\n        <li ng-show="config.allowedActions.edit && temp.isEditable()">\r\n            <a href="" tabindex="-1" data-toggle="modal" data-target="#edit" ng-click="temp.getContent();">\r\n                <i class="glyphicon glyphicon-pencil"><\/i> {{\'edit\' | translate}}\r\n            <\/a>\r\n        <\/li>\r\n\r\n        <li ng-show="config.allowedActions.changePermissions">\r\n            <a href="" tabindex="-1" data-toggle="modal" data-target="#changepermissions">\r\n                <i class="glyphicon glyphicon-lock"><\/i> {{\'permissions\' | translate}}\r\n            <\/a>\r\n        <\/li>\r\n\r\n        <li ng-show="config.allowedActions.compress && temp.isCompressible()">\r\n            <a href="" tabindex="-1" data-toggle="modal" data-target="#compress">\r\n                <i class="glyphicon glyphicon-compressed"><\/i> {{\'compress\' | translate}}\r\n            <\/a>\r\n        <\/li>\r\n\r\n        <li ng-show="config.allowedActions.extract && temp.isExtractable()">\r\n            <a href="" tabindex="-1" data-toggle="modal" data-target="#extract" ng-click="temp.tempModel.name=\'\'">\r\n                <i class="glyphicon glyphicon-export"><\/i> {{\'extract\' | translate}}\r\n            <\/a>\r\n        <\/li>\r\n\r\n        <li class="divider"><\/li>\r\n        \r\n        <li ng-show="config.allowedActions.remove">\r\n            <a href="" tabindex="-1" data-toggle="modal" data-target="#delete">\r\n                <i class="glyphicon glyphicon-trash"><\/i> {{\'remove\' | translate}}\r\n            <\/a>\r\n        <\/li>\r\n\r\n    <\/ul>\r\n<\/div>');
    n.put("src/templates/item-toolbar.html", '<div ng-show="!item.inprocess">\r\n    <button class="hidden btn btn-sm btn-default" data-toggle="modal" data-target="#rename" ng-show="config.allowedActions.rename" ng-click="touch(item)" title="{{\'rename\' | translate}}">\r\n        <i class="glyphicon glyphicon-edit"><\/i>\r\n    <\/button>\r\n    <button class="hidden btn btn-sm btn-default" data-toggle="modal" data-target="#copy" ng-show="config.allowedActions.copy && !item.isFolder()" ng-click="touch(item)" title="{{\'copy\' | translate}}">\r\n        <i class="glyphicon glyphicon-log-out"><\/i>\r\n    <\/button>\r\n    <button class="btn btn-sm btn-default" data-toggle="modal" data-target="#edit" ng-show="config.allowedActions.edit && item.isEditable()" ng-click="item.getContent(); touch(item)" title="{{\'edit\' | translate}}">\r\n        <i class="glyphicon glyphicon-pencil"><\/i>\r\n    <\/button>\r\n    <button class="hidden btn btn-sm btn-default" data-toggle="modal" data-target="#changepermissions" ng-show="config.allowedActions.changePermissions" ng-click="touch(item)" title="{{\'permissions\' | translate}}">\r\n        <i class="glyphicon glyphicon-lock"><\/i>\r\n    <\/button>\r\n    <button class="hidden btn btn-sm btn-default" data-toggle="modal" data-target="#compress" ng-show="config.allowedActions.compress && item.isCompressible()" ng-click="touch(item)" title="{{\'compress\' | translate}}">\r\n        <i class="glyphicon glyphicon-compressed"><\/i>\r\n    <\/button>\r\n    <button class="btn btn-sm btn-default" data-toggle="modal" data-target="#extract" ng-show="config.allowedActions.extract && item.isExtractable()" ng-click="touch(item); item.tempModel.name=\'\'" title="{{\'extract\' | translate}}">\r\n        <i class="glyphicon glyphicon-export"><\/i>\r\n    <\/button>\r\n    <button class="hidden btn btn-sm btn-default" ng-show="config.allowedActions.download && !item.isFolder()" ng-click="item.download()" title="{{\'download\' | translate}}">\r\n        <i class="glyphicon glyphicon-cloud-download"><\/i>\r\n    <\/button>\r\n    <button class="btn btn-sm btn-default" ng-show="config.allowedActions.preview && item.isImage()" ng-click="openImagePreview(item)" title="{{\'view_item\' | translate}}">\r\n        <i class="glyphicon glyphicon-picture"><\/i>\r\n    <\/button>\r\n    <button class="btn btn-sm btn-danger" data-toggle="modal" data-target="#delete" ng-show="config.allowedActions.remove" ng-click="touch(item)" title="{{\'remove\' | translate}}">\r\n        <i class="glyphicon glyphicon-trash"><\/i>\r\n    <\/button>\r\n<\/div>\r\n<div ng-show="item.inprocess">\r\n    <button class="btn btn-sm" style="visibility: hidden">&nbsp;<\/button><span class="label label-warning">{{"wait" | translate}} ...<\/span>\r\n<\/div>');
    n.put("src/templates/main-icons.html", '<div class="iconset clearfix">\r\n    <div class="col-120" ng-repeat="item in fileNavigator.fileList | filter: query | orderBy: orderProp" ng-show="!fileNavigator.requesting && !fileNavigator.error">\r\n        <a id="doc-{{item.model.DocumentId}}" href="" class="thumbnail text-center" ng-click="smartClick(item)" name="{{item.model.name|spaceless}}"  title="{{item.model.name}} ({{item.model.sizeKb()}}kb)">\r\n            <div class="item-icon">\r\n                <i class="glyphicon glyphicon-folder-open" ng-show="item.model.type === \'dir\'"><\/i>\r\n                <i class="glyphicon glyphicon-file" ng-show="item.model.type === \'file\'"><\/i>\r\n            <\/div>\r\n            {{item.model.name| strLimit : 11 }}\r\n        <\/a>\r\n    <\/div>\r\n\r\n    <div ng-show="fileNavigator.requesting">\r\n        <div ng-include="config.tplPath + \'/spinner.html\'"><\/div>\r\n    <\/div>\r\n\r\n    <div class="alert alert-warning" ng-show="!fileNavigator.requesting && fileNavigator.fileList.length < 1 && !fileNavigator.error">\r\n        {{"no_files_in_folder" | translate}}...\r\n    <\/div>\r\n    \r\n    <div class="alert alert-danger" ng-show="!fileNavigator.requesting && fileNavigator.error">\r\n        {{ fileNavigator.error }}\r\n    <\/div>\r\n<\/div>');
    n.put("src/templates/main-table-modal.html", '<table class="table table-condensed table-modal-condensed mb0">\r\n    <thead>\r\n        <tr>\r\n            <th>\r\n                <a href="" ng-click="order(\'model.name\')">\r\n                    {{"name" | translate}}\r\n                    <span class="sortorder" ng-show="predicate[1] === \'model.name\'" ng-class="{reverse:reverse}"><\/span>\r\n                <\/a>\r\n            <\/th>\r\n            <th class="text-right"><\/th>\r\n        <\/tr>\r\n    <\/thead>\r\n    <tbody class="file-item">\r\n        <tr ng-show="fileNavigator.requesting">\r\n            <td colspan="2">\r\n                <div ng-include="config.tplPath + \'/spinner.html\'"><\/div>\r\n            <\/td>\r\n        <\/tr>\r\n        <tr ng-show="!fileNavigator.requesting && !fileNavigator.listHasFolders() && !fileNavigator.error">\r\n            <td colspan="2">\r\n                {{"no_folders_in_folder" | translate}}...\r\n            <\/td>\r\n            <td class="text-right">\r\n                <button class="btn btn-sm btn-default" ng-click="fileNavigator.upDir()">{{"go_back" | translate}}<\/button>\r\n            <\/td>\r\n        <\/tr>\r\n        <tr ng-show="!fileNavigator.requesting && fileNavigator.error">\r\n            <td colspan="2">\r\n                {{ fileNavigator.error }}\r\n            <\/td>\r\n        <\/tr>\r\n        <tr ng-repeat="item in fileNavigator.fileList | orderBy:predicate:reverse" ng-show="!fileNavigator.requesting && item.model.type === \'dir\'">\r\n            <td>\r\n                <a href="" ng-click="fileNavigator.folderClick(item)" title="{{item.model.name}} ({{item.model.sizeKb()}}kb)">\r\n                    <i class="glyphicon glyphicon-folder-close"><\/i>\r\n                    {{item.model.name | strLimit : 32}}\r\n                <\/a>\r\n            <\/td>\r\n            <td class="text-right">\r\n                <button class="btn btn-sm btn-default" ng-click="select(item, temp)">\r\n                    <i class="glyphicon glyphicon-hand-up"><\/i> {{"select_this" | translate}}\r\n                <\/button>\r\n            <\/td>\r\n        <\/tr>\r\n    <\/tbody>\r\n<\/table>');
    n.put("src/templates/main-table.html", '<table class="table mb0 table-files">\r\n    <thead>\r\n        <tr>\r\n            <th>\r\n                <a href="" ng-click="order(\'model.name\')">\r\n                    {{"name" | translate}}\r\n                    <span class="sortorder" ng-show="predicate[1] === \'model.name\'" ng-class="{reverse:reverse}"><\/span>\r\n                <\/a>\r\n            <\/th>\r\n            <th class="hidden hidden-xs">\r\n                <a href="" ng-click="order(\'model.size\')">\r\n                    {{"size" | translate}}\r\n                    <span class="sortorder" ng-show="predicate[1] === \'model.size\'" ng-class="{reverse:reverse}"><\/span>\r\n                <\/a>\r\n            <\/th>\r\n            <th class="hidden hidden-sm hidden-xs">\r\n                <a href="" ng-click="order(\'model.date\')">\r\n                    {{"date" | translate}}\r\n                    <span class="sortorder" ng-show="predicate[1] === \'model.date\'" ng-class="{reverse:reverse}"><\/span>\r\n                <\/a>\r\n            <\/th>\r\n            <th class="hidden hidden-sm hidden-xs">\r\n                <a href="" ng-click="order(\'model.permissions\')">\r\n                    {{"permissions" | translate}}\r\n                    <span class="sortorder" ng-show="predicate[1] === \'model.permissions\'" ng-class="{reverse:reverse}"><\/span>\r\n                <\/a>\r\n            <\/th>\r\n            <th class="text-right"><\/th>\r\n        <\/tr>\r\n    <\/thead>\r\n    <tbody class="file-item">\r\n        <tr ng-show="fileNavigator.requesting">\r\n            <td colspan="5">\r\n                <div ng-include="config.tplPath + \'/spinner.html\'"><\/div>\r\n            <\/td>\r\n        <\/tr>\r\n        <tr ng-show="!fileNavigator.requesting && fileNavigator.fileList.length < 1 && !fileNavigator.error">\r\n            <td colspan="5">\r\n                {{"no_files_in_folder" | translate}}...\r\n            <\/td>\r\n        <\/tr>\r\n        <tr ng-show="!fileNavigator.requesting && fileNavigator.error">\r\n            <td colspan="5">\r\n                {{ fileNavigator.error }}\r\n            <\/td>\r\n        <\/tr>\r\n        <tr ng-repeat="item in fileNavigator.fileList | filter: {model:{name: query}} | orderBy:predicate:reverse" ng-show="!fileNavigator.requesting">\r\n            <td ng-right-click="touch(item)">\r\n                <a id="doc-{{item.model.DocumentId}}" name="{{item.model.name|spaceless}}" href="" ng-click="smartClick(item)" title="{{item.model.name}} ({{item.model.sizeKb()}}kb)">\r\n                    <i class="glyphicon glyphicon-folder-close" ng-show="item.model.type === \'dir\'"><\/i>\r\n                    <i class="glyphicon glyphicon-file" ng-show="item.model.type === \'file\'"><\/i>\r\n                    {{item.model.name | strLimit : 64}} <span ng-if="item.model.DocumentCount && item.model.DocumentCount>0">({{item.model.DocumentCount}})</span>\r\n                <\/a>\r\n            <\/td>\r\n            <td class="hidden hidden-xs">\r\n                {{item.model.sizeKb()}}kb\r\n            <\/td>\r\n            <td class="hidden hidden-sm hidden-xs">\r\n                {{item.model.date | formatDate }}\r\n            <\/td>\r\n            <td class="hidden hidden-sm hidden-xs">\r\n                {{item.model.perms.toCode(item.model.type === \'dir\'?\'d\':\'-\')}}\r\n            <\/td>\r\n            <td class="text-right">\r\n                <div ng-include="config.tplPath + \'/item-toolbar.html\'"><\/div>\r\n            <\/td>\r\n        <\/tr>\r\n    <\/tbody>\r\n<\/table>');
    n.put("src/templates/main.html", '<div ng-controller="FileManagerCtrl">\r\n    <div ng-include="config.tplPath + \'/navbar.html\'"><\/div>\r\n\r\n    <div class="file_mgr">\r\n        <div class="row">\r\n\r\n           <div class="col-lg-2 col-sm-12 col-md-2 sidebar  file-tree animated slow fadeIn" ng-include="config.tplPath + \'/sidebar.html\'" ng-show="config.sidebar && fileNavigator.history[0]"><\/div>\r\n            <div class="main" ng-class="config.sidebar && fileNavigator.history[0] && \' file_mgr_cont col-lg-10 col-sm-12  col-md-10\'">\r\n                <div  class="breadcrumb" ng-include="config.tplPath + \'/current-folder-breadcrumb.html\'" ng-show="config.breadcrumb"><\/div>\r\n                <div ng-include="config.tplPath + \'/\' + viewTemplate" class="main-navigation clearfix"><\/div>\r\n            <\/div>\r\n        <\/div>\r\n    <\/div>\r\n\r\n    <div ng-include="config.tplPath + \'/modals.html\'"><\/div>\r\n    <div ng-include="config.tplPath + \'/item-context-menu.html\'"><\/div>\r\n<\/div>');
    n.put("src/templates/modals.html", '<div class="modal animated fadeIn" id="imagepreview">\r\n  <div class="modal-dialog">\r\n    <div class="modal-content">\r\n    <form ng-submit="remove(temp)">\r\n      <div class="modal-header">\r\n        <button type="button" class="close" data-dismiss="modal">\r\n            <span aria-hidden="true">&times;<\/span>\r\n            <span class="sr-only">{{"close" | translate}}<\/span>\r\n        <\/button>\r\n        <h4 class="modal-title">{{"preview" | translate}}<\/h4>\r\n      <\/div>\r\n      <div class="modal-body" ng-show="temp.getUrl().length > 10">\r\n        <div class="text-center">\r\n          <img id="imagepreview-target" class="preview" alt="{{temp.model.name}}" ng-class="{\'loading\': temp.inprocess}">\r\n          <span class="label label-warning" ng-show="temp.inprocess">{{\'loading\' | translate}} ...<\/span>\r\n        <\/div>\r\n        <div ng-include data-src="\'error-bar\'" class="clearfix"><\/div>\r\n      <\/div>\r\n      <div class="modal-footer">\r\n        <button type="button" class="btn btn-default" data-dismiss="modal" ng-disabled="temp.inprocess">{{"close" | translate}}<\/button>\r\n      <\/div>\r\n      <\/form>\r\n    <\/div>\r\n  <\/div>\r\n<\/div>\r\n\r\n<div class="modal animated fadeIn" id="delete">\r\n  <div class="modal-dialog">\r\n    <div class="modal-content">\r\n    <form ng-submit="remove(temp)">\r\n      <div class="modal-header">\r\n        <button type="button" class="close" data-dismiss="modal">\r\n            <span aria-hidden="true">&times;<\/span>\r\n            <span class="sr-only">{{"close" | translate}}<\/span>\r\n        <\/button>\r\n        <h4 class="modal-title">{{"confirm" | translate}}<\/h4>\r\n      <\/div>\r\n      <div class="modal-body">\r\n        {{\'sure_to_delete\' | translate}} <b>{{temp.model.name}}<\/b> ?\r\n        <div ng-include data-src="\'error-bar\'" class="clearfix"><\/div>\r\n      <\/div>\r\n      <div class="modal-footer">\r\n        <button type="button" class="btn btn-default" data-dismiss="modal" ng-disabled="temp.inprocess">{{"cancel" | translate}}<\/button>\r\n        <button type="submit" class="btn btn-primary" ng-disabled="temp.inprocess" autofocus="autofocus">{{"remove" | translate}}<\/button>\r\n      <\/div>\r\n      <\/form>\r\n    <\/div>\r\n  <\/div>\r\n<\/div>\r\n\r\n<div class="modal animated fadeIn" id="rename">\r\n  <div class="modal-dialog">\r\n    <div class="modal-content">\r\n        <form ng-submit="rename(temp)">\r\n            <div class="modal-header">\r\n              <button type="button" class="close" data-dismiss="modal">\r\n                  <span aria-hidden="true">&times;<\/span>\r\n                  <span class="sr-only">{{"close" | translate}}<\/span>\r\n              <\/button>\r\n              <h4 class="modal-title">{{\'change_name_move\' | translate}}<\/h4>\r\n            <\/div>\r\n            <div class="modal-body">\r\n              <label class="radio">{{\'enter_new_name_for\' | translate}} <b>{{temp.model.name}}<\/b><\/label>\r\n              <input class="form-control" ng-model="temp.tempModel.name" autofocus="autofocus">\r\n\r\n              <div ng-include data-src="\'path-selector\'" class="clearfix"><\/div>\r\n              <div ng-include data-src="\'error-bar\'" class="clearfix"><\/div>\r\n            <\/div>\r\n            <div class="modal-footer">\r\n              <button type="button" class="btn btn-default" data-dismiss="modal" ng-disabled="temp.inprocess">{{"cancel" | translate}}<\/button>\r\n              <button type="submit" class="hidden btn btn-primary" ng-disabled="temp.inprocess">{{\'rename\' | translate}}<\/button>\r\n            <\/div>\r\n        <\/form>\r\n    <\/div>\r\n  <\/div>\r\n<\/div>\r\n\r\n<div class="modal animated fadeIn" id="copy">\r\n  <div class="modal-dialog">\r\n    <div class="modal-content">\r\n        <form ng-submit="copy(temp)">\r\n            <div class="modal-header">\r\n              <button type="button" class="close" data-dismiss="modal">\r\n                  <span aria-hidden="true">&times;<\/span>\r\n                  <span class="sr-only">{{"close" | translate}}<\/span>\r\n              <\/button>\r\n              <h4 class="modal-title">{{\'copy_file\' | translate}}<\/h4>\r\n            <\/div>\r\n            <div class="modal-body">\r\n              <label class="radio">{{\'enter_new_name_for\' | translate}} <b>{{temp.model.name}}<\/b><\/label>\r\n              <input class="form-control" ng-model="temp.tempModel.name" autofocus="autofocus">\r\n\r\n              <div ng-include data-src="\'path-selector\'" class="clearfix"><\/div>\r\n              <div ng-include data-src="\'error-bar\'" class="clearfix"><\/div>\r\n            <\/div>\r\n            <div class="modal-footer">\r\n              <button type="button" class="btn btn-default" data-dismiss="modal" ng-disabled="temp.inprocess">{{"cancel" | translate}}<\/button>\r\n              <button type="submit" class="btn btn-primary" ng-disabled="temp.inprocess">Copy<\/button>\r\n            <\/div>\r\n        <\/form>\r\n    <\/div>\r\n  <\/div>\r\n<\/div>\r\n\r\n<div class="modal animated fadeIn" id="compress">\r\n  <div class="modal-dialog">\r\n    <div class="modal-content">\r\n        <form ng-submit="compress(temp)">\r\n            <div class="modal-header">\r\n              <button type="button" class="close" data-dismiss="modal">\r\n                  <span aria-hidden="true">&times;<\/span>\r\n                  <span class="sr-only">{{"close" | translate}}<\/span>\r\n              <\/button>\r\n              <h4 class="modal-title">{{\'compress\' | translate}}<\/h4>\r\n            <\/div>\r\n            <div class="modal-body">\r\n              <div ng-show="temp.asyncSuccess">\r\n                  <div class="label label-success error-msg">{{\'compression_started\' | translate}}<\/div>\r\n              <\/div>\r\n              <div ng-hide="temp.asyncSuccess">\r\n                  <div ng-hide="config.allowedActions.compressChooseName">\r\n                    {{\'sure_to_start_compression_with\' | translate}} <b>{{temp.model.name}}<\/b> ?\r\n                  <\/div>\r\n                  <div ng-show="config.allowedActions.compressChooseName">\r\n                    <label class="radio">{{\'enter_folder_name_for_compression\' | translate}} <b>{{fileNavigator.currentPath.join(\'/\')}}/{{temp.model.name}}<\/b><\/label>\r\n                    <input class="form-control" ng-model="temp.tempModel.name" autofocus="autofocus">\r\n                  <\/div>\r\n              <\/div>\r\n\r\n              <div ng-include data-src="\'error-bar\'" class="clearfix"><\/div>\r\n            <\/div>\r\n            <div class="modal-footer">\r\n              <div ng-show="temp.asyncSuccess">\r\n                  <button type="button" class="btn btn-default" data-dismiss="modal" ng-disabled="temp.inprocess">{{"close" | translate}}<\/button>\r\n              <\/div>\r\n              <div ng-hide="temp.asyncSuccess">\r\n                  <button type="button" class="btn btn-default" data-dismiss="modal" ng-disabled="temp.inprocess">{{"cancel" | translate}}<\/button>\r\n                  <button type="submit" class="btn btn-primary" ng-disabled="temp.inprocess">{{\'compress\' | translate}}<\/button>\r\n              <\/div>\r\n            <\/div>\r\n        <\/form>\r\n    <\/div>\r\n  <\/div>\r\n<\/div>\r\n\r\n<div class="modal animated fadeIn" id="extract" ng-init="temp.emptyName()">\r\n  <div class="modal-dialog">\r\n    <div class="modal-content">\r\n        <form ng-submit="extract(temp)">\r\n            <div class="modal-header">\r\n              <button type="button" class="close" data-dismiss="modal">\r\n                  <span aria-hidden="true">&times;<\/span>\r\n                  <span class="sr-only">{{"close" | translate}}<\/span>\r\n              <\/button>\r\n              <h4 class="modal-title">{{\'extract_item\' | translate}}<\/h4>\r\n            <\/div>\r\n            <div class="modal-body">\r\n              <div ng-show="temp.asyncSuccess">\r\n                  <div class="label label-success error-msg">{{\'extraction_started\' | translate}}<\/div>\r\n              <\/div>\r\n              <div ng-hide="temp.asyncSuccess">\r\n                  <label class="radio">{{\'enter_folder_name_for_extraction\' | translate}} <b>{{temp.model.name}}<\/b><\/label>\r\n                  <input class="form-control" ng-model="temp.tempModel.name" autofocus="autofocus">\r\n                  <div ng-include data-src="\'path-selector\'" class="clearfix"><\/div>\r\n              <\/div>\r\n              <div ng-include data-src="\'error-bar\'" class="clearfix"><\/div>\r\n            <\/div>\r\n            <div class="modal-footer">\r\n              <div ng-show="temp.asyncSuccess">\r\n                  <button type="button" class="btn btn-default" data-dismiss="modal" ng-disabled="temp.inprocess">{{"close" | translate}}<\/button>\r\n              <\/div>\r\n              <div ng-hide="temp.asyncSuccess">\r\n                  <button type="button" class="btn btn-default" data-dismiss="modal" ng-disabled="temp.inprocess">{{"cancel" | translate}}<\/button>\r\n                  <button type="submit" class="btn btn-primary" ng-disabled="temp.inprocess">{{\'extract\' | translate}}<\/button>\r\n              <\/div>\r\n            <\/div>\r\n        <\/form>\r\n    <\/div>\r\n  <\/div>\r\n<\/div>\r\n\r\n<div class="modal animated fadeIn" id="edit" ng-class="{\'modal-fullscreen\': fullscreen}">\r\n  <div class="modal-dialog modal-lg">\r\n    <div class="modal-content">\r\n        <form ng-submit="edit(temp)">\r\n            <div class="modal-header">\r\n              <button type="button" class="close" data-dismiss="modal">\r\n                  <span aria-hidden="true">&times;<\/span>\r\n                  <span class="sr-only">{{"close" | translate}}<\/span>\r\n              <\/button>\r\n              <button type="button" class="close mr5" ng-click="fullscreen=!fullscreen">\r\n                  <span>&loz;<\/span>\r\n                  <span class="sr-only">{{\'toggle_fullscreen\' | translate}}<\/span>\r\n              <\/button>\r\n              <h4 class="modal-title">{{\'edit_file\' | translate}}<\/h4>\r\n            <\/div>\r\n            <div class="modal-body">\r\n                <label class="radio">{{\'file_content\' | translate}}<\/label>\r\n                <span class="label label-warning" ng-show="temp.inprocess">{{\'loading\' | translate}} ...<\/span>\r\n                <textarea class="form-control code" ng-model="temp.tempModel.content" ng-show="!temp.inprocess" autofocus="autofocus"><\/textarea>\r\n                <div ng-include data-src="\'error-bar\'" class="clearfix"><\/div>\r\n            <\/div>\r\n            <div class="modal-footer">\r\n              <button type="button" class="btn btn-default" data-dismiss="modal" ng-disabled="temp.inprocess">{{\'close\' | translate}}<\/button>\r\n              <button type="submit" class="btn btn-primary" ng-show="config.allowedActions.edit" ng-disabled="temp.inprocess">{{\'edit\' | translate}}<\/button>\r\n            <\/div>\r\n        <\/form>\r\n    <\/div>\r\n  <\/div>\r\n<\/div>\r\n\r\n<div class="modal animated fadeIn" id="newfolder">\r\n  <div class="modal-dialog">\r\n    <div class="modal-content">\r\n        <form ng-submit="createFolder(temp)">\r\n            <div class="modal-header">\r\n              <button type="button" class="close" data-dismiss="modal">\r\n                  <span aria-hidden="true">&times;<\/span>\r\n                  <span class="sr-only">{{"close" | translate}}<\/span>\r\n              <\/button>\r\n              <h4 class="modal-title">{{\'create_folder\' | translate}}<\/h4>\r\n            <\/div>\r\n            <div class="modal-body">\r\n              <label class="radio">{{\'folder_name\' | translate}}<\/label>\r\n              <input class="form-control" ng-model="temp.tempModel.name" autofocus="autofocus">\r\n              <div ng-include data-src="\'error-bar\'" class="clearfix"><\/div>\r\n            <\/div>\r\n            <div class="modal-footer">\r\n              <button type="button" class="btn btn-default" data-dismiss="modal" ng-disabled="temp.inprocess">{{"cancel" | translate}}<\/button>\r\n              <button type="submit" class="btn btn-primary" ng-disabled="temp.inprocess">{{\'create\' | translate}}<\/button>\r\n            <\/div>\r\n        <\/form>\r\n    <\/div>\r\n  <\/div>\r\n<\/div>\r\n\r\n<div class="modal animated fadeIn" id="uploadfile">\r\n  <div class="modal-dialog">\r\n    <div class="modal-content">\r\n        <form ng-submit="uploadFiles()">\r\n            <div class="modal-header">\r\n              <button type="button" class="close" data-dismiss="modal">\r\n                  <span aria-hidden="true">&times;<\/span>\r\n                  <span class="sr-only">{{"close" | translate}}<\/span>\r\n              <\/button>\r\n              <h4 class="modal-title">{{"upload_file" | translate}}<\/h4>\r\n            <\/div>\r\n            <div class="modal-body">\r\n              <label class="radio">{{"files_will_uploaded_to" | translate}} <b>{{fileNavigator.currentPath.join(\'/\')}}<\/b><\/label>\r\n              <input type="file" class="form-control" ng-file="$parent.uploadFileList" autofocus="autofocus" multiple="multiple"/>\r\n              <div ng-include data-src="\'error-bar\'" class="clearfix"><\/div>\r\n            <\/div>\r\n            <div class="modal-footer">\r\n              <div ng-show="!fileUploader.requesting">\r\n                  <button type="button" class="btn btn-default" data-dismiss="modal">{{"cancel" | translate}}<\/button>\r\n                  <button type="submit" class="btn btn-primary" ng-disabled="!uploadFileList.length || fileUploader.requesting">{{\'upload\' | translate}}<\/button>\r\n              <\/div>\r\n              <div ng-show="fileUploader.requesting">\r\n                  <span class="label label-warning">{{"uploading" | translate}} ...<\/span>\r\n              <\/div>\r\n            <\/div>\r\n        <\/form>\r\n    <\/div>\r\n  <\/div>\r\n<\/div>\r\n\r\n<div class="modal animated fadeIn" id="changepermissions">\r\n  <div class="modal-dialog">\r\n    <div class="modal-content">\r\n        <form ng-submit="changePermissions(temp)">\r\n            <div class="modal-header">\r\n              <button type="button" class="close" data-dismiss="modal">\r\n                  <span aria-hidden="true">&times;<\/span>\r\n                  <span class="sr-only">{{"close" | translate}}<\/span>\r\n              <\/button>\r\n              <h4 class="modal-title">{{\'change_permissions\' | translate}}<\/h4>\r\n            <\/div>\r\n            <div class="modal-body">\r\n              <table class="table mb0">\r\n                  <thead>\r\n                      <tr>\r\n                          <th>{{\'permissions\' | translate}}<\/th>\r\n                          <th class="col-xs-1 text-center">{{\'exec\' | translate}}<\/th>\r\n                          <th class="col-xs-1 text-center">{{\'read\' | translate}}<\/th>\r\n                          <th class="col-xs-1 text-center">{{\'write\' | translate}}<\/th>\r\n                      <\/tr>\r\n                  <\/thead>\r\n                  <tbody>\r\n                      <tr ng-repeat="(permTypeKey, permTypeValue) in temp.tempModel.perms">\r\n                          <td>{{permTypeKey | translate}}<\/td>\r\n                          <td ng-repeat="(permKey, permValue) in permTypeValue" class="col-xs-1 text-center" ng-click="main()">\r\n                              <label class="col-xs-12">\r\n                                <input type="checkbox" ng-model="temp.tempModel.perms[permTypeKey][permKey]">\r\n                              <\/label>\r\n                          <\/td>\r\n                      <\/tr>\r\n                <\/tbody>\r\n              <\/table>\r\n              <div class="checkbox" ng-show="config.enablePermissionsRecursive && temp.model.type === \'dir\'">\r\n                <label>\r\n                  <input type="checkbox" ng-model="temp.tempModel.recursive"> {{\'recursive\' | translate}}\r\n                <\/label>\r\n              <\/div>\r\n              <div class="clearfix mt10">\r\n                  <span class="label label-primary pull-left">\r\n                    {{\'original\' | translate}}: {{temp.model.perms.toCode(temp.model.type === \'dir\'?\'d\':\'-\')}} ({{temp.model.perms.toOctal()}})\r\n                  <\/span>\r\n                  <span class="label label-primary pull-right">\r\n                    {{\'changes\' | translate}}: {{temp.tempModel.perms.toCode(temp.model.type === \'dir\'?\'d\':\'-\')}} ({{temp.tempModel.perms.toOctal()}})\r\n                  <\/span>\r\n              <\/div>\r\n              <div ng-include data-src="\'error-bar\'" class="clearfix"><\/div>\r\n            <\/div>\r\n            <div class="modal-footer">\r\n              <button type="button" class="btn btn-default" data-dismiss="modal">{{"cancel" | translate}}<\/button>\r\n              <button type="submit" class="btn btn-primary" ng-disabled="">{{\'change\' | translate}}<\/button>\r\n            <\/div>\r\n        <\/form>\r\n    <\/div>\r\n  <\/div>\r\n<\/div>\r\n\r\n<div class="modal animated fadeIn" id="selector" ng-controller="ModalFileManagerCtrl">\r\n  <div class="modal-dialog">\r\n    <div class="modal-content">\r\n      <div class="modal-header">\r\n        <button type="button" class="close" data-dismiss="modal">\r\n            <span aria-hidden="true">&times;<\/span>\r\n            <span class="sr-only">{{"close" | translate}}<\/span>\r\n        <\/button>\r\n        <h4 class="modal-title">{{"select_destination_folder" | translate}}<\/h4>\r\n      <\/div>\r\n      <div class="modal-body">\r\n        <div>\r\n            <div ng-include="config.tplPath + \'/current-folder-breadcrumb.html\'"><\/div>\r\n            <div ng-include="config.tplPath + \'/main-table-modal.html\'"><\/div>\r\n        <\/div>\r\n      <\/div>\r\n      <div class="modal-footer">\r\n        <button type="button" class="btn btn-default" data-dismiss="modal" ng-disabled="temp.inprocess">{{"close" | translate}}<\/button>\r\n      <\/div>\r\n    <\/div>\r\n  <\/div>\r\n<\/div>\r\n\r\n<script type="text/ng-template" id="path-selector">\r\n  <div class="panel panel-primary mt10 mb0">\r\n    <div class="panel-body">\r\n        <div class="detail-sources">\r\n          <code class="mr5"><b>{{"source" | translate}}:<\/b> {{temp.model.fullPath()}}<\/code>\r\n        <\/div>\r\n        <div class="detail-sources">\r\n          <code class="mr5"><b>{{"destination" | translate}}:<\/b>{{temp.tempModel.fullPath()}}<\/code>\r\n          <a href="" class="label label-primary" ng-click="openNavigator(temp)">{{\'change\' | translate}}<\/a>\r\n        <\/div>\r\n    <\/div>\r\n  <\/div>\r\n<\/script>\r\n<script type="text/ng-template" id="error-bar">\r\n    <div class="label label-danger error-msg pull-left animated fadeIn" ng-show="temp.error">\r\n      <i class="glyphicon glyphicon-remove-circle"><\/i>\r\n      <span>{{temp.error}}<\/span>\r\n    <\/div>\r\n<\/script>');
    n.put("src/templates/sidebar.html", '<h1>File Explorer <\/h1><ul class="nav nav-sidebar file-tree-root">\r\n    <li ng-repeat="item in fileNavigator.history" ng-include="\'folder-branch-item\'" ng-class="{\'active\': item.name == fileNavigator.currentPath.join(\'/\')}"><\/li>\r\n<\/ul>\r\n\r\n<script type="text/ng-template" id="folder-branch-item">\r\n    <a href="" ng-click="fileNavigator.folderClick(item.item)" class="animated fast fadeInDown">\r\n        <i class="glyphicon glyphicon-folder-close mr2" ng-hide="isInThisPath(item.name)"><\/i>\r\n        <i class="glyphicon glyphicon-folder-open mr2"  ng-show="isInThisPath(item.name)"><\/i>\r\n        {{ (item.name.split(\'/\').pop() || \'/\') | strLimit : 24 }}\r\n    <\/a>\r\n    <ul class="nav nav-sidebar">\r\n        <li ng-repeat="item in item.nodes" ng-include="\'folder-branch-item\'" ng-class="{\'active\': item.name == fileNavigator.currentPath.join(\'/\')}"><\/li>\r\n    <\/ul>\r\n<\/script>');
    n.put("src/templates/spinner.html", '<div class="spinner-wrapper col-xs-12">\r\n    <svg class="spinner-container" style="width:65px;height:65px" viewBox="0 0 44 44">\r\n        <circle class="path" cx="22" cy="22" r="20" fill="none" stroke-width="4"><\/circle>\r\n    <\/svg>\r\n<\/div>')
}]);
//# sourceMappingURL=angular-filemanager.min.js.map